#ifndef CUTMGR_H
#define CUTMGR_H

/// @file CutMgr.h
/// @brief CutMgr のヘッダファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2025 Yusuke Matsunaga
/// All rights reserved.

#include "ym/aig.h"
#include "ym/TvFunc.h"


BEGIN_NAMESPACE_YM_AIG

//////////////////////////////////////////////////////////////////////
/// @class Cut Cut.h "Cut.h"
/// @brief カットを表すクラス
//////////////////////////////////////////////////////////////////////
class Cut
{
public:

  /// @brief コンストラクタ
  Cut();

  /// @brief デストラクタ
  ~Cut();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 葉の数を返す．
  SizeType
  leaf_num() const
  {
    return mLeaves.size();
  }

  /// @brief 葉のリストを返す．
  const std::vector<AigEdge>&
  leaves() const
  {
    return mLeaves();
  }

  /// @brief 論理関数を返す．
  TvFunc
  func() const
  {
    return mFunc;
  }


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // 葉のリスト
  std::vector<AigEdge> mLeaves;

  // 論理関数
  TvFunc mFunc;

};


//////////////////////////////////////////////////////////////////////
/// @class CutMgr CutMgr.h "CutMgr.h"
/// @brief カットの列挙を行うクラス
///
/// カットの列挙はファンインのカットの直積を用いる．
/// その際に重複した計算を防ぐために入力側からのトポロジカル順で行う．
/// ただし，途中で AIG の構造が変わっている場合があるので注意が必要．
//////////////////////////////////////////////////////////////////////
class CutMgr
{
public:

  /// @brief コンストラクタ
  CutMgr(
    SizeType cut_size ///< [in] カットの入力数の最大値
  );

  /// @brief デストラクタ
  ~CutMgr();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief カットを列挙する．
  std::vector<Cut>
  enum_cut(
    const AigNode* node ///< [in] 根のノード
  );


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // カットサイズ
  SizeType mCutSize{0};

};

END_NAMESPACE_YM_AIG

#endif // CUTMGR_H
