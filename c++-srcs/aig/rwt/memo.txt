
abc のリバースエンジニアリング覚え書き

- 本体は src/base/abci/abcRewrite.c にある Abc_NtkRewrite()

シグネチャは以下の通り

int
Abc_NtkRewrite(
  Abc_Ntk_t* pNtk,
  int fUpdateLevel,
  int fUseZeros,
  int fVerbose,
  int fVeryVerbose,
  int fPlaceEnable
)

先頭が 'p' で始まっている変数はポインタ
先頭が 'f' で始まっている変数は bool のフラグ

- pNtk:
  対象のネットワーク

- fUpdateLevel:
  置き換えによって最大段数の増加を許さないとき 1 にする（たぶｎ）

- fUseZeros:
  置き換えのゲインが０の時に置き換えるとき 1 にする．

- fVerbose:
  verbose フラグ

- fVeryVerbose:
  very verbose フラグ

- fPlaceEnable:
  不明．たぶん，意味のあることはやっていない．
  多くのコードがコメントアウトされている．


全体の流れ

// structual hash であることを確認する．
assert( Abc_NtkIsStrash(pNtk) );

// なんらかのクリーンアップ
Abc_AigCleanUp(pNtk->pManFunc);

// rewriting manager の開始
pManRwr = Rwr_ManStart( 0 );

// レベルの計算
if ( fUpdateLevel ) {
  Abc_NtkStartReverseLevels( pNtk, 0 );
}

// cut manager の開始
pManCut = Abc_NtkStartCutManForRewrite( pNtk );

foreach node in pNtk {
  if ( Abc_NodeIsPersistant(pNode) ) {
    // 'persistant' なノードはスキップ
    // なお，persistant に設定するコードは存在しない．
    continue;
  }
  if ( Abc_ObjFanoutNum(pNode) > 1000 ) {
    // ファンアウト数が 1000 を超えるノードもスキップ
    continue;
  }

  // resynthesis 本体
  nGain = Rwr_NodeRewrite(pManRwr, pManCut, pNode,
                          fUpdateLevel,
			  fUseZeros,
			  fPlaceEnable);
  if ( !(mGain > 0 || (nGain == 0 && fUseZeros)) ) {
    // 役に立たない置き換えはスキップ
    continue;
  }

  // 今の置き換えを確定する．(たぶん)
  pGraph = Rwr_ManReadDecs(pManRwr);
  fCompl = Rwr_ManReadCompl(pManRwr);

  if ( fPlaceEnable ) {
    Abc_AigUpdateReset(pNtk->pManFunc);
  }

  // 必要なら反転を行う．
  if ( fCompl ) Dec_GraphComplement( pGraph );

  // 置き換えを行う．
  if ( !Dec_GraphUpdateNetwork( pNode, pGraph,
                                fUpdateLevel,
				nGain ) ) {
     // なんらかのエラーが起きた．
     RetValue = -1;
     break;
  }

  // 反転を元に戻す．
  if ( fCompl ) Dec_GraphComplement( pGraph );
}

後は諸々の終了処理
ID番号の振り直し
レベルの計算
sanity check

Dec_GraphUpdateNetwork() で AIG の置き換えを行うので
トップレベルの for ループは入力側からのトポロジカル順で
行う必要がある．

Rwr_NodeRewrite は opt/rwr/rwrEva.c にある．

int
Rwr_NodeRewrite(
  Rwr_Man_t* p,
  Cut_Man_t* pManCut,
  Abc_Obj_t* pNode,
  int fUpdateLevel,
  int fUseZeros,
  int fPlaceEnable
)

Required = fUpdateLevel? Abc_ObjRequiredLevel(pNode) : ABC_INFINITY;

// pNode のカットを列挙する．
pCut = Abc_NodeGetCutsRecursive( pManCut, pNode, 0, 0 );

// abc では pCut をリンクトリストにしている．
foreach pCut {
  if ( pCut->nLeaves < 4 ) {
    // 4入力未満のカットは無視する．
    continue;
  }
  // ファンインの極性と順序を正規化する．
  // ファンインのノードのファンアウト数が 1 のノードが 3 個以上ならスキップ
  // if ( Counter > 2 ) {
  //   continue;
  // }

  // 置き換えによって削除されるノード数を数える．
  foreach fanin of pCut {
    ++ fanin->vFanouts.nSize;
  }
  nNodesSaved = Abc_NodeMffcLabelAig( pNode );

  // ゲインの計算を行う．
  pGraph = Rwr_CutEvaluate( p, pNode, pCut, p->vFaninsCut,
                            nNodesSaved, Required,
			    &GainCur, fPlaceEnable );
  // 最大ゲインの置き換えの更新を行う．
}

Abc_NodeMffcLabelAig は base/abc/abcRefs.c にある．

int
Abc_NodeMffcLabelAig(
  Abc_Obj_t* pNode
);

if ( Abc_ObjFaninNum(pNode) == 0 ) {
  return 0;
}
nConeSize = Abc_NodeRefDeref( pNode, 0, 1 );
(void) Abc_NodeRefDeref( pNode, 1, 0 );
return nConeSize;

int
Abc_NodeRefDeref(
  Abc_Obj_t* pNode,
  int fReference,
  int fLabel
);


Rwr_CutEvaluate は opt/rwr/rwrEva.c にある．

Dec_Graph_t*
Rwr_CutEvaluate(
  Rwr_Man_t* p,
  Abc_Obj_t* pRoot,
  Cut_Cut_t* pCut,
  Vec_Ptr_t* vFaninsCur,
  int nNodesSaved,
  int LevelMax,
  int* pGainBest,
  int fPlaceEnable
)

// pCut の関数にマッチするパタンのリストを得る．
foreach pGraphCur {
  // 新規に追加されるノード数を見積もる．
  nNodesAdded = Dec_GraphToNetworkCount( pRoot, pGraphCur,
                                         nNodesSaved, LevelMax );
  if ( nNodesAdded == -1 ) {
    continue;
  }
  gain = nNodesSaved - nNodesAdded
  assert( gain >= 0 );
  // GainBest を更新
}

Dec_GraphToNetworkCount は bool/dec/decAbc.c にある．

int
Dec_GraphToNetworkCount(
  Abc_Obj_t* pRoot,
  Dec_Graph_t* pGraph,
  int NodeMax,
  int LevelMax
)

// 定数や入力の場合は追加のノードはない．
if ( Dec_GraphIsConst(pGraph) || Dec_GraphIsVar(pGraph) ) {
  return 0;
}

あとは pGraph のノードを入力からのトポロジカル順に処理していって
必要なノードが存在しているか調べる．
ただし，その際にノード数やレベルが NodeMax か LevelMax を超えたら
-1 を返す．

入力の正規化

Extra_Truth4VarNPN は misc/extra/extraUtilMisc.c にある．
